//share 3 ways - split the screen width 3 ways between sibling elements with "sib" class
@mixin share3{
  margin:0;
  width: (100% / 3);
  height: 100%;
}
@mixin share2{
  margin:0;
  width: (100% / 2);
  height: 100%;
}
// makes items in a list inline and unstyled
@mixin listy{
  & li {
    list-style:none;
    display: inline-block;
  }
}
//turn into flex container and center items vertically and evenly across main axis inside
@mixin flexy{
  display: flex;
  justify-content: space-around;
  align-items: center;
}
@mixin flexy2{
  display: flex;
  justify-content: center;
  align-items: center;
}
//align items center
@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}
//define number of albums on shelf and space between them
@mixin fit-on-shelf($albums, $margin){
  float:left;
  margin-right: $margin;
  margin-bottom:$margin;
  width: ((100% - (($albums - 1) * $margin)) / $albums);
}
//background image properties
@mixin background{
  background-repeat: no-repeat;
  background-size: cover;
  object-fit: cover;
}
//this psuedoelement sets the 100% padding top value based on the object's width. I am using it here to set the height of the album divs equal to their width.
@mixin square{
  position: relative;
  &:before{
    content: "";
    display: block;
    padding-top: 100%;
  }
}
// change background image based on index -- doesn't work ðŸ˜Ÿ

// @mixin pic{
//   @for $i from 1 through $albums {
//     // .album:nth-of-type(#{$i}){
//     background: url("../img/album#{$i}.jpg");
//     // }
//   }
// }

//alternate hover colors in an unordered list
@mixin hover{
  &:nth-child(even):hover{
    color: $mustard;
    &:nth-child(odd):hover{
      color: $blush;
    }
  }
}
